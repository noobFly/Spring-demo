<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="false">

	<!--facade-scan自动搜索@Component , @Service ,@Repository等标注的类 -->
	<context:component-scan base-package="com.noob.loan.core.service" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<property name="initialSize" value="${dataSource.initialPoolSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="maxWait" value="${dataSource.connectionTimeout}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.validationInterval}" />
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
		<property name="testOnReturn" value="false" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<property name="filters" value="${dataSource.filters}" />
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.noob.core.service.impl</value>
				<value>com.noob.core.dao</value>
			</list>
		</property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>

    <bean id="druid-stat-interceptor"
        class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>



	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="52428800"></property>
		<property name="maxInMemorySize" value="10960"></property>
	</bean>


	<bean id="localSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath: bootstrap/context/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="localTxManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="localTansTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="localTxManager" />
		<property name="isolationLevelName" value="ISOLATION_READ_COMMITTED" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="localSqlSessionFactory" />
	</bean>

	<bean id="localMapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="processPropertyPlaceHolders" value="false" />
		<property name="basePackage" value="com.noob.core.dao" />
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>

	<!-- 声明使用注解式事务 -->

	<tx:advice id="txAdviceLocalTxManager" transaction-manager="localTxManager">
		<tx:attributes>
			<tx:method name="load*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="view*" read-only="true" />
			<tx:method name="show*" read-only="true" />
			<tx:method name="mng*" propagation="REQUIRED" rollback-for="ServiceLevelException" />
			<tx:method name="create*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
			<tx:method name="do*" propagation="REQUIRED" rollback-for="ServiceLevelException" />
			<tx:method name="batch*" propagation="REQUIRED"
				rollback-for="ServiceLevelException" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="crudMethodsLocalTxManager"
			expression="execution(* com.noob.core.service.impl..*.*(..))" />
		<aop:advisor advice-ref="txAdviceLocalTxManager"
			pointcut-ref="crudMethodsLocalTxManager" />
	</aop:config>

	<!-- 配置线程池 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="5" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="30000" />
		<!-- 线程池维护线程的最大数量 -->
		<property name="maxPoolSize" value="1000" />
		<!-- 线程池所使用的缓冲队列 -->
		<property name="queueCapacity" value="200" />
	</bean>


	<bean id="disconfMgrBean" class="com.baidu.disconf.client.DisconfMgrBean"
		destroy-method="destroy">
		<property name="scanPackage" value="com.iboxpay.loan.disconf" />
	</bean>

	<bean id="disconfMgrBeanSecond" class="com.baidu.disconf.client.DisconfMgrBeanSecond"
		init-method="init" destroy-method="destroy">
	</bean>

	<!--以下配置开始，是基于XML方式实现，所必须增加的配置 -->
	<!-- 使用托管方式的disconf配置(无代码侵入, 配置更改会自动reload) -->
	<bean id="configpropertiesDisconf"
		class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:datasource.properties</value>
				<value>classpath*:config.properties</value>
				<value>classpath*:dubbo.properties</value>
				<value>classpath*:config.properties</value>
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		class="com.baidu.disconf.client.addons.properties.ReloadingPropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="propertiesArray">
			<list>
				<ref bean="configpropertiesDisconf" />
			</list>
		</property>
	</bean>

</beans>
